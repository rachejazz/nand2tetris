// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //x and y
    Mux16(a=x, b=false, sel=zx, out=xo);
    Mux16(a=y, b=false, sel=zy, out=yo);
    Not16(in=xo, out=notxo);
    Mux16(a=xo, b=notxo, sel=nx, out=xo2);
    Not16(in=yo, out=notyo);
    Mux16(a=yo, b=notyo, sel=ny, out=yo2);

    //f
    And16(a=xo2, b=yo2, out=aandB);
    Add16(a=xo2, b=yo2, out=aplusB);
    Mux16(a=aandB, b=aplusB, sel=f, out=out0);

    //starts checking type of output
    Not16(in=out0, out=nout0);//negate out
    Mux16(a=out0, b=nout0, sel=no, out=out);//get out of NOTout
    Mux16(a=out0, b=nout0, sel=no, out[0..7]=outlsb);//for lsb
    Mux16(a=out0, b=nout0, sel=no, out[8..15]=outmsb);//for msb
    Mux16(a=out0, b=nout0, sel=no, out[15]=ng);//store lastmsb for -ve num                               
    
    /*Turns out, this grub works as well. TESTED!
    Mux16(a=out0, b=nout0, sel=no, out[0..7]=outflag1,out[8..15]=outflag2,out[15]=ng);*/
    

    Or8Way(in=outlsb, out=o1);//check lsbs to be 0 or not
    Or8Way(in=outmsb, out=o2);//check msbs to be 0 or not
    Or(a=o1, b=o2, out=o3);//final OR for whole 16bit out
    Not(in=o3, out=zr);
}
